##############################################################################
## Filename:          /home/netfpga/anhqvn/tranchau/13_6_xps_pr_hrav_final_reduce_modify_hwicap/hw/pcores/packet_decoder_v1_00_a/data/packet_decoder_v2_1_0.mpd
## Description:       Microprocessor Peripheral Description
## Date:              Sat Sep 12 10:24:07 2015 (by Create and Import Peripheral Wizard)
##############################################################################

BEGIN nf10_packet_decoder

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION HDL = VERILOG
OPTION STYLE = MIX
OPTION USAGE_LEVEL = BASE_USER
OPTION RUN_NGCBUILD = TRUE
OPTION IMP_NETLIST = TRUE
OPTION IP_GROUP = NetFPGA-10G HCMUT Project
OPTION DESC = Packet Decoder
OPTION LONG_DESC = NetFPGA-10G DDoS Packet Decoder includes pre, raw-fifo, header-fifo, pos

## Bus Interfaces
BUS_INTERFACE BUS=M_AXIS_0, BUS_STD=AXIS, BUS_TYPE=INITIATOR
BUS_INTERFACE BUS=S_AXIS_0, BUS_STD=AXIS, BUS_TYPE=TARGET
BUS_INTERFACE BUS=M_AXIS_1, BUS_STD=AXIS, BUS_TYPE=INITIATOR
BUS_INTERFACE BUS=S_AXIS_1, BUS_STD=AXIS, BUS_TYPE=TARGET
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE=SLAVE



## Generics for VHDL or Parameters for Verilog
PARAMETER C_S_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = S_AXIS_0:S_AXIS_1
PARAMETER C_M_AXIS_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXIS_0:M_AXIS_1
PARAMETER C_M_AXIS_DATA_WIDTH  = 256, DT = INTEGER, ASSIGNMENT = CONSTANT, RANGE = (8,32,64,256), BUS = M_AXIS_0:M_AXIS_1:S_AXIS_0:S_AXIS_1
PARAMETER C_S_AXIS_DATA_WIDTH  = 256, DT = INTEGER, ASSIGNMENT = CONSTANT, RANGE = (8,32,64,256), BUS = M_AXIS_0:M_AXIS_1:S_AXIS_0:S_AXIS_1
PARAMETER C_M_AXIS_TUSER_WIDTH = 128, DT = INTEGER, ASSIGNMENT = CONSTANT, RANGE = (128), BUS = M_AXIS_0:M_AXIS_1:S_AXIS_0:S_AXIS_1
PARAMETER C_S_AXIS_TUSER_WIDTH = 128, DT = INTEGER, ASSIGNMENT = CONSTANT, RANGE = (128), BUS = M_AXIS_0:M_AXIS_1:S_AXIS_0:S_AXIS_1


## AXILITE Parameters
PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector(31 downto 0), PAIR = C_HIGHADDR, ADDRESS = BASE, BUS = S_AXI, MIN_SIZE = 0x1000, ASSIGNMENT = REQUIRE
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector(31 downto 0), PAIR = C_BASEADDR, ADDRESS = HIGH, BUS = S_AXI, ASSIGNMENT = REQUIRE
PARAMETER C_FAMILY = virtex5, DT = STRING
PARAMETER C_S_AXI_PROTOCOL = AXI4LITE, DT = STRING, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_S_AXI_ACLK_FREQ_HZ = 100000000, DT = INTEGER, BUS = S_AXI, IO_IS = clk_freq, CLK_PORT = axi_aclk, CLK_UNIT = HZ, ASSIGNMENT = REQUIRE

## Registers offsets definitions
PARAMETER RST_CNTRS_OFFSET              = 0x0,  DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER DEBUG_DROP_CNTRS_OFFSET       = 0x4,  DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER DEBUG_PASS_NIC_CNTRS_OFFSET   = 0x8,  DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER DEBUG_PASS_CPU_CNTRS_OFFSET   = 0xc,  DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER PKT_IN_OFFSET                 = 0x10, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BYTES_IN_OFFSET               = 0x14, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER PKT_OUT_OFFSET                = 0x18, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BYTES_OUT_OFFSET              = 0x1c, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER PKT_PASS_OFFSET               = 0x20, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BYTES_PASS_OFFSET             = 0x24, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER PKT_DROP_OFFSET               = 0x28, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER BYTES_DROP_OFFSET             = 0x2c, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER MODE_DEBUG_OFFSET             = 0x30, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL

## Peripheral ports
PORT axi_aclk = "",   DIR = I, SIGIS = CLK, BUS = M_AXIS_0:M_AXIS_1:S_AXIS_0:S_AXIS_1:S_AXI, ASSIGNMENT = REQUIRE
PORT axi_resetn = "", DIR = I, SIGIS = RST, ASSIGNMENT = REQUIRE

## M_AXIS_0
PORT m_axis_tdata_0  = TDATA,  DIR = O, VEC = [C_M_AXIS_DATA_WIDTH-1:0],     BUS = M_AXIS_0, ENDIAN = LITTLE
PORT m_axis_tstrb_0  = TSTRB,  DIR = O, VEC = [(C_M_AXIS_DATA_WIDTH/8)-1:0], BUS = M_AXIS_0, ENDIAN = LITTLE
PORT m_axis_tuser_0  = TUSER,  DIR = O, VEC = [C_M_AXIS_TUSER_WIDTH-1:0],    BUS = M_AXIS_0, ENDIAN = LITTLE
PORT m_axis_tvalid_0 = TVALID, DIR = O,                                      BUS = M_AXIS_0
PORT m_axis_tready_0 = TREADY, DIR = I,                                      BUS = M_AXIS_0
PORT m_axis_tlast_0  = TLAST,  DIR = O,                                      BUS = M_AXIS_0

## M_AXIS_1
PORT m_axis_tdata_1  = TDATA,  DIR = O, VEC = [C_M_AXIS_DATA_WIDTH-1:0],     BUS = M_AXIS_1, ENDIAN = LITTLE
PORT m_axis_tstrb_1  = TSTRB,  DIR = O, VEC = [(C_M_AXIS_DATA_WIDTH/8)-1:0], BUS = M_AXIS_1, ENDIAN = LITTLE
PORT m_axis_tuser_1  = TUSER,  DIR = O, VEC = [C_M_AXIS_TUSER_WIDTH-1:0],    BUS = M_AXIS_1, ENDIAN = LITTLE
PORT m_axis_tvalid_1 = TVALID, DIR = O,                                      BUS = M_AXIS_1
PORT m_axis_tready_1 = TREADY, DIR = I,                                      BUS = M_AXIS_1
PORT m_axis_tlast_1  = TLAST,  DIR = O,                                      BUS = M_AXIS_1

## S_AXIS_0
PORT s_axis_tdata_0  = TDATA,  DIR = I, VEC = [C_S_AXIS_DATA_WIDTH-1:0],     BUS = S_AXIS_0, ENDIAN = LITTLE
PORT s_axis_tstrb_0  = TSTRB,  DIR = I, VEC = [(C_S_AXIS_DATA_WIDTH/8)-1:0], BUS = S_AXIS_0, ENDIAN = LITTLE
PORT s_axis_tuser_0  = TUSER,  DIR = I, VEC = [C_S_AXIS_TUSER_WIDTH-1:0],    BUS = S_AXIS_0, ENDIAN = LITTLE
PORT s_axis_tvalid_0 = TVALID, DIR = I,                                      BUS = S_AXIS_0
PORT s_axis_tready_0 = TREADY, DIR = O,                                      BUS = S_AXIS_0
PORT s_axis_tlast_0  = TLAST,  DIR = I,                                      BUS = S_AXIS_0

## S_AXIS_1
PORT s_axis_tdata_1  = TDATA,  DIR = I, VEC = [C_S_AXIS_DATA_WIDTH-1:0],     BUS = S_AXIS_1, ENDIAN = LITTLE
PORT s_axis_tstrb_1  = TSTRB,  DIR = I, VEC = [(C_S_AXIS_DATA_WIDTH/8)-1:0], BUS = S_AXIS_1, ENDIAN = LITTLE
PORT s_axis_tuser_1  = TUSER,  DIR = I, VEC = [C_S_AXIS_TUSER_WIDTH-1:0],    BUS = S_AXIS_1, ENDIAN = LITTLE
PORT s_axis_tvalid_1 = TVALID, DIR = I,                                      BUS = S_AXIS_1
PORT s_axis_tready_1 = TREADY, DIR = O,                                      BUS = S_AXIS_1
PORT s_axis_tlast_1  = TLAST,  DIR = I,                                      BUS = S_AXIS_1

## S_AXI
PORT S_AXI_AWADDR  = AWADDR,  DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_AWVALID = AWVALID, DIR = I, BUS = S_AXI
PORT S_AXI_WDATA   = WDATA,   DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WSTRB   = WSTRB,   DIR = I, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WVALID  = WVALID,  DIR = I, BUS = S_AXI
PORT S_AXI_BREADY  = BREADY,  DIR = I, BUS = S_AXI
PORT S_AXI_ARADDR  = ARADDR,  DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_ARVALID = ARVALID, DIR = I, BUS = S_AXI
PORT S_AXI_RREADY  = RREADY,  DIR = I, BUS = S_AXI
PORT S_AXI_ARREADY = ARREADY, DIR = O, BUS = S_AXI
PORT S_AXI_RDATA   = RDATA,   DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_RRESP   = RRESP,   DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_RVALID  = RVALID,  DIR = O, BUS = S_AXI
PORT S_AXI_WREADY  = WREADY,  DIR = O, BUS = S_AXI
PORT S_AXI_BRESP   = BRESP,   DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_BVALID  = BVALID,  DIR = O, BUS = S_AXI
PORT S_AXI_AWREADY = AWREADY, DIR = O, BUS = S_AXI

END
